<--------------------------SELECT QUERY-------------------------->


1. Selezionare tutti gli studenti nati nel 1990 (160);

    SELECT * FROM `students` 
    WHERE `date_of_birth` LIKE '1990%';

2. Selezionare tutti i corsi che valgono più di 10 crediti (479);

    SELECT * FROM `courses` 
    WHERE `cfu` > 10;

3. Selezionare tutti gli studenti che hanno più di 30 anni;

    SELECT * FROM `students` 
    WHERE YEAR(`date_of_birth`) <= 1994;

4. Selezionare tutti i corsi del primo semestre del primo anno di un qualsiasi corso di laurea (286);

    SELECT * FROM `courses` 
    WHERE `period` = 'I semestre' 
    AND `year` = 1;

5. Selezionare tutti gli appelli d'esame che avvengono nel pomeriggio (dopo le 14) del 20/06/2020 (21);

    SELECT * FROM `exams`
    WHERE `date` = '2020-06-20'
    AND `hour` >= '14%';

6. Selezionare tutti i corsi di laurea magistrale (38);

    SELECT * FROM `degrees`
    WHERE `level` = 'magistrale';

7. Da quanti dipartimenti è composta l'università? (12);

    SELECT COUNT(`id`) FROM `departments`;

8. Quanti sono gli insegnanti che non hanno un numero di telefono? (50);

    SELECT * FROM `teachers` 
    WHERE `phone` IS null;


<--------------------------GROUP BY QUERY-------------------------->


1. Contare quanti iscritti ci sono stati ogni anno;

    SELECT COUNT(`id`), YEAR(`enrolment_date`) AS `year`
    FROM `students`
    GROUP BY YEAR(enrolment_date);

2. Contare gli insegnanti che hanno l'ufficio nello stesso edificio;

    SELECT office_address, COUNT(`id`) AS number_teachers
    FROM `teachers`
    GROUP BY office_address
    HAVING COUNT(`id`) > 1;

3. Calcolare la media dei voti di ogni appello d'esame;

    SELECT `exam_id`, AVG(`vote`) AS `media_voti`
    FROM `exam_student` 
    GROUP BY `exam_id`;

4. Contare quanti corsi di laurea ci sono per ogni dipartimento;

    SELECT `department_id`, COUNT(`id`) AS `courses_degree`
    FROM `degrees`
    GROUP BY `department_id`;


<--------------------------JOIN QUERY-------------------------->


1. Selezionare tutti gli studenti iscritti al Corso di Laurea in Economia;

    SELECT * FROM degrees
    INNER JOIN students
    ON degrees.id = students.degree_id
    WHERE degrees.id = 53;

2. Selezionare tutti i Corsi di Laurea Magistrale del Dipartimento di
Neuroscienze;

    SELECT * FROM degrees
    INNER JOIN departments
    ON degrees.department_id = departments.id
    WHERE departments.id = 7
    AND degrees.level = 'magistrale';

3. Selezionare tutti i corsi in cui insegna Fulvio Amato (id=44);

    SELECT * FROM `courses`
    INNER JOIN course_teacher
    ON courses.id = course_teacher.course_id
    INNER JOIN teachers
    ON teachers.id = course_teacher.teacher_id
    WHERE teachers.id = 44;

4. Selezionare tutti gli studenti con i dati relativi al corso di laurea a cui
sono iscritti e il relativo dipartimento, in ordine alfabetico per cognome e
nome;

    SELECT * FROM `students`
    INNER JOIN degrees
    ON students.degree_id = degrees.id
    INNER JOIN departments
    ON departments.id = degrees.department_id
    ORDER BY students.surname, students.name;

5. Selezionare tutti i corsi di laurea con i relativi corsi e insegnanti;

    SELECT * FROM `degrees`
    INNER JOIN courses 
    ON degrees.id = courses.degree_id
    INNER JOIN course_teacher
    ON courses.id = course_teacher.course_id
    INNER JOIN teachers 
    ON teachers.id = course_teacher.teacher_id;

6. Selezionare tutti i docenti che insegnano nel Dipartimento di
Matematica (54);

    SELECT DISTINCT teachers.name, teachers.surname, departments.name FROM teachers
    INNER JOIN course_teacher 
    ON teachers.id = course_teacher.teacher_id 
    INNER JOIN courses 
    ON course_teacher.course_id = courses.id 
    INNER JOIN degrees 
    ON courses.degree_id = degrees.id 
    INNER JOIN departments 
    ON degrees.department_id = departments.id 
    WHERE departments.name = "Dipartimento di Matematica";

7. BONUS: Selezionare per ogni studente il numero di tentativi sostenuti
per ogni esame, stampando anche il voto massimo. Successivamente,
filtrare i tentativi con voto minimo 18;

    SELECT COUNT(exam_student.exam_id), students.name, students.surname, MAX(exam_student.vote)
    FROM students 
    INNER JOIN exam_student 
    ON students.id = exam_student.student_id 
    INNER JOIN exams 
    ON exam_student.exam_id = exams.id 
    WHERE exam_student.vote >= 18 
    GROUP BY exams.course_id, students.id;

